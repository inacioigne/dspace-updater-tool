version: '3.7'
networks:
  dspacenet:

services:
  # DSpace (backend) webapp container
  dspace:
    container_name: dspace
    environment:
      # Below syntax may look odd, but it is how to override dspace.cfg settings via env variables.
      # See https://github.com/DSpace/DSpace/blob/main/dspace/config/config-definition.xml
      # __P__ => "." (e.g. dspace__P__dir => dspace.dir)
      # __D__ => "-" (e.g. google__D__metadata => google-metadata)
      # dspace.dir: Must match with Dockerfile's DSPACE_INSTALL directory.
      dspace__P__dir: /dspace
      # Uncomment to set a non-default value for dspace.server.url or dspace.ui.url
      dspace__P__server__P__url: http://localhost:8080/server
      dspace__P__ui__P__url: http://localhost:4000
      dspace__P__name: 'Deposita'
      # db.url: Ensure we are using the 'dspacedb' image for our database
      db__P__url: 'jdbc:postgresql://host.docker.internal:5006/dspace'
      # solr.server: Ensure we are using the 'dspacesolr' image for Solr
      solr__P__server: http://dspacesolr:8983/solr
      # proxies.trusted.ipranges: This setting is required for a REST API running in Docker to trust requests
      # from the host machine. This IP range MUST correspond to the 'dspacenet' subnet defined above.
      proxies__P__trusted__P__ipranges: '172.23.0'
    build:
      context: .
      dockerfile: Dockerfile
    networks:
      dspacenet:
    ports:
    - published: 8080
      target: 8080
    - published: 8009
      target: 8009
    stdin_open: true
    tty: true
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
    # Keep DSpace assetstore directory between reboots
    - ../../dspace-install-dir:/dspace
    # Mount local [src]/dspace/config/ to container. This syncs your local configs with container
    # NOTE: Environment variables specified above will OVERRIDE any configs in local.cfg or dspace.cfg
#    - ./dspace/config:/dspace/config
    # Ensure that the database is ready BEFORE starting tomcat
    # 1. While a TCP connection to dspacedb port 5432 is not available, continue to sleep
    # 2. Then, run database migration to init database tables
    # 3. Finally, start Tomcat
    entrypoint:
    - /bin/bash
    - '-c'
    - |
      rm -rf /dspace/config/spring
      rm -rf /dspace/lib
      rm -rf /dspace/webapps
      cp -r /dspace-tmp/* /dspace
      ls -lsah /dspace/webapps
      /dspace/bin/dspace database migrate ignored
      mkdir /dspace/config/temp
      cp /dspace/config/item-submission.xml /dspace/config/temp
      cp /dspace/config/input-forms.xml /dspace/config/temp
      rm /dspace/config/spring/api/bte.xml
      rm /dspace/config/GeoLiteCity.dat
      /dspace/bin/dspace submission-forms-migrate -s /dspace/config/temp/item-submission.xml -f /dspace/config/temp/input-forms.xml
      mv /dspace/config/item-submission.xml.migrated /dspace/config/item-submission.xml
      mv /dspace/config/submission-forms.xml.migrated /dspace/config/submission-forms.xml
      sed -i 's/<step id="collection"\/>//g' /dspace/config/item-submission.xml
      ls -lsah /dspace/webapps
      catalina.sh run
  # DSpace Solr container
  dspacesolr:
    container_name: dspacesolr
    # Uses official Solr image at https://hub.docker.com/_/solr/
    image: solr:8.11-slim
    networks:
      dspacenet:
    ports:
    - published: 8983
      target: 8983
    stdin_open: true
    tty: true
    working_dir: /var/solr/data
    volumes:
    # Mount our local Solr core configs so that they are available as Solr configsets on container
    - ./dspace/solr/authority:/opt/solr/server/solr/configsets/authority
    - ./dspace/solr/oai:/opt/solr/server/solr/configsets/oai
    - ./dspace/solr/search:/opt/solr/server/solr/configsets/search
    - ./dspace/solr/statistics:/opt/solr/server/solr/configsets/statistics
    # Keep Solr data directory between reboots
    - solr_data:/var/solr/data
    # Initialize all DSpace Solr cores using the mounted local configsets (see above), then start Solr
    # * First, run precreate-core to create the core (if it doesn't yet exist). If exists already, this is a no-op
    # * Second, copy updated configs from mounted configsets to this core. If it already existed, this updates core
    #   to the latest configs. If it's a newly created core, this is a no-op.
    entrypoint:
    - /bin/bash
    - '-c'
    - |
      init-var-solr
      precreate-core authority /opt/solr/server/solr/configsets/authority
      cp -r -u /opt/solr/server/solr/configsets/authority/* authority
      precreate-core oai /opt/solr/server/solr/configsets/oai
      cp -r -u /opt/solr/server/solr/configsets/oai/* oai
      precreate-core search /opt/solr/server/solr/configsets/search
      cp -r -u /opt/solr/server/solr/configsets/search/* search
      precreate-core statistics /opt/solr/server/solr/configsets/statistics
      cp -r -u /opt/solr/server/solr/configsets/statistics/* statistics
      exec solr -f
volumes:
  solr_data:
